# Cal.com API v2 OpenAPI specification excerpt.
# Source: https://cal.com/docs/api-reference/v2/bookings/get-all-bookings
# Update this file whenever the upstream spec changes.

"/v2/bookings": {
  "get": {
    "operationId": "BookingsController_2024_08_13_getBookings",
    "summary": "Get all bookings",
    "description": "<Note>Please make sure to pass in the cal-api-version header value as mentioned in the Headers section. Not passing the correct value will default to an older version of this endpoint.</Note>",
    "parameters": [
      {
        "name": "cal-api-version",
        "in": "header",
        "description": "Must be set to 2024-08-13. If not set to this value, the endpoint will default to an older version.",
        "required": true,
        "schema": {
          "type": "string",
          "default": "2024-08-13"
        }
      },
      {
        "name": "status",
        "required": false,
        "in": "query",
        "description": "Filter bookings by status. If you want to filter by multiple statuses, separate them with a comma.",
        "example": "?status=upcoming,past",
        "schema": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["upcoming", "recurring", "past", "cancelled", "unconfirmed"]
          }
        }
      },
      {
        "name": "attendeeEmail",
        "required": false,
        "in": "query",
        "description": "Filter bookings by the attendee's email address.",
        "example": "example@domain.com",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "attendeeName",
        "required": false,
        "in": "query",
        "description": "Filter bookings by the attendee's name.",
        "example": "John Doe",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "bookingUid",
        "required": false,
        "in": "query",
        "description": "Filter bookings by the booking Uid.",
        "example": "2NtaeaVcKfpmSZ4CthFdfk",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "eventTypeIds",
        "required": false,
        "in": "query",
        "description": "Filter bookings by event type ids belonging to the user. Event type ids must be separated by a comma.",
        "example": "?eventTypeIds=100,200",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "eventTypeId",
        "required": false,
        "in": "query",
        "description": "Filter bookings by event type id belonging to the user.",
        "example": "?eventTypeId=100",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "teamsIds",
        "required": false,
        "in": "query",
        "description": "Filter bookings by team ids that user is part of. Team ids must be separated by a comma.",
        "example": "?teamIds=50,60",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "teamId",
        "required": false,
        "in": "query",
        "description": "Filter bookings by team id that user is part of",
        "example": "?teamId=50",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "afterStart",
        "required": false,
        "in": "query",
        "description": "Filter bookings with start after this date string.",
        "example": "?afterStart=2025-03-07T10:00:00.000Z",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "beforeEnd",
        "required": false,
        "in": "query",
        "description": "Filter bookings with end before this date string.",
        "example": "?beforeEnd=2025-03-07T11:00:00.000Z",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "afterCreatedAt",
        "required": false,
        "in": "query",
        "description": "Filter bookings that have been created after this date string.",
        "example": "?afterCreatedAt=2025-03-07T10:00:00.000Z",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "beforeCreatedAt",
        "required": false,
        "in": "query",
        "description": "Filter bookings that have been created before this date string.",
        "example": "?beforeCreatedAt=2025-03-14T11:00:00.000Z",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "afterUpdatedAt",
        "required": false,
        "in": "query",
        "description": "Filter bookings that have been updated after this date string.",
        "example": "?afterUpdatedAt=2025-03-07T10:00:00.000Z",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "beforeUpdatedAt",
        "required": false,
        "in": "query",
        "description": "Filter bookings that have been updated before this date string.",
        "example": "?beforeUpdatedAt=2025-03-14T11:00:00.000Z",
        "schema": {
          "type": "string"
        }
      },
      {
        "name": "sortStart",
        "required": false,
        "in": "query",
        "description": "Sort results by their start time in ascending or descending order.",
        "example": "?sortStart=asc OR ?sortStart=desc",
        "schema": {
          "enum": ["asc", "desc"],
          "type": "string"
        }
      },
      {
        "name": "sortEnd",
        "required": false,
        "in": "query",
        "description": "Sort results by their end time in ascending or descending order.",
        "example": "?sortEnd=asc OR ?sortEnd=desc",
        "schema": {
          "enum": ["asc", "desc"],
          "type": "string"
        }
      },
      {
        "name": "sortCreated",
        "required": false,
        "in": "query",
        "description": "Sort results by their creation time (when booking was made) in ascending or descending order.",
        "example": "?sortCreated=asc OR ?sortCreated=desc",
        "schema": {
          "enum": ["asc", "desc"],
          "type": "string"
        }
      },
      {
        "name": "sortUpdatedAt",
        "required": false,
        "in": "query",
        "description": "Sort results by their updated time (for example when booking status changes) in ascending or descending order.",
        "example": "?sortUpdated=asc OR ?sortUpdated=desc",
        "schema": {
          "enum": ["asc", "desc"],
          "type": "string"
        }
      },
      {
        "name": "take",
        "required": false,
        "in": "query",
        "description": "The number of items to return",
        "example": 10,
        "schema": {
          "default": 100,
          "type": "number"
        }
      },
      {
        "name": "skip",
        "required": false,
        "in": "query",
        "description": "The number of items to skip",
        "example": 0,
        "schema": {
          "default": 0,
          "type": "number"
        }
      },
      {
        "name": "Authorization",
        "in": "header",
        "description": "value must be `Bearer <token>` where `<token>` is api key prefixed with cal_ or managed user access token",
        "required": true,
        "schema": {
          "type": "string"
        }
      }
    ],
    "responses": {
      "200": {
        "description": "",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/GetBookingsOutput_2024_08_13"
            }
          }
        }
      }
    },
    "tags": ["Bookings"]
  }
}
